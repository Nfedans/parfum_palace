{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodejs_projects\\\\cars_client_side_react\\\\cars_react_app\\\\client\\\\src\\\\components\\\\Register.js\";\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport axios from \"axios\";\nimport LinkInClass from \"../components/LinkInClass\";\nimport { SERVER_HOST } from \"../config/global_constants\";\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const userObject = {\n        name: this.state.name,\n        username: this.state.username,\n        password: this.state.password\n      };\n      console.log(userObject);\n      axios.defaults.withCredentials = true;\n      axios.post(\"\".concat(SERVER_HOST, \"/user/Register/\").concat(this.state.name, \"/\").concat(this.state.username, \"/\").concat(this.state.password), userObject).then(res => {\n        if (res.data) {\n          if (res.data.errorMessage) {\n            console.log(res.data);\n            console.log(res.data.accessLevel);\n            console.log(res.data.errorMessage);\n          } else {\n            console.log(res);\n            console.log(res.data);\n            console.log(res.data.accessLevel);\n            console.log(\"User Registered and added\");\n            console.log(res.data.name);\n            console.log(res.data.accessLevel);\n            sessionStorage.name = res.data.name;\n            sessionStorage.accessLevel = res.data.accessLevel;\n            this.setState({\n              isRegistered: true\n            });\n          }\n        } else {\n          console.log(\"Registration failed\");\n        }\n      });\n    };\n\n    this.state = {\n      name: \"\",\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      isRegistered: false\n    };\n  }\n\n  validateName() {\n    // valid name pattern\n    return this.state.name.length > 1;\n  }\n  /* validateUsername()\r\n   {\r\n       // valid email pattern\r\n       return (this.state.username)\r\n   }*/\n\n\n  validatePassword() {\n    const pattern = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[£!#€$%^&*]).{10,}$/; //eslint-disable-line\n\n    return pattern.test(String(this.state.password));\n  }\n\n  validateConfirmPassword() {\n    return this.state.confirmPassword.length > 0 && this.state.password === this.state.confirmPassword;\n  }\n\n  validate() {\n    return {\n      name: this.validateName(),\n\n      /*username: this.validateUsername(),*/\n      password: this.validatePassword(),\n      confirmPassword: this.validateConfirmPassword()\n    };\n  }\n\n  render() {\n    const checkMark = \"✔\";\n    const formInputsState = this.validate();\n    const inputsAreAllValid = Object.keys(formInputsState).every(index => formInputsState[index]);\n    let nameErrorMessage = \"\";\n    /*let usernameErrorMessage = \"\";*/\n\n    let passwordErrorMessage = \"\";\n    let confirmPasswordErrorMessage = \"\";\n\n    if (!this.validateName()) {\n      nameErrorMessage = React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Name must be at least two characters long\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }));\n    }\n    /*  if(!this.validateUsername())\r\n      {\r\n          usernameErrorMessage = <div className=\"error\">Enter a valid username<br/></div>;\r\n      }*/\n\n\n    if (!this.validatePassword()) {\n      let errorMessages = [];\n\n      if (this.state.password.length < 10) {\n        errorMessages.push(\"Password must be at least ten characters long.\");\n      }\n\n      if (!this.state.password.match(/[0-9]/)) {\n        errorMessages.push(\"Password must contain at least one digit (0-9).\");\n      }\n\n      if (!this.state.password.match(/[a-z]/)) {\n        errorMessages.push(\"Password must contain at least one lowercase character.\");\n      }\n\n      if (!this.state.password.match(/[A-Z]/)) {\n        errorMessages.push(\"Password must contain at least one uppercase character.{'\\n''}\");\n      }\n\n      if (!this.state.password.match(/[£!#€$%^&*]/)) {\n        errorMessages.push(\"Password must contain at least one of the characters £!#€$%^&*\");\n      }\n\n      passwordErrorMessage = React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, errorMessages.map(errorMessage => React.createElement(\"li\", {\n        key: errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \" \", errorMessage, \" \"))));\n    }\n\n    if (!this.validateConfirmPassword()) {\n      confirmPasswordErrorMessage = React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Passwords must match\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }));\n    }\n\n    return (\n      /*<div className=\"form-container\">\r\n          {this.state.redirectToDisplayAllCars ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n            <Form>\r\n              <Form.Group controlId=\"name\">\r\n                  <Form.Label>Name</Form.Label>\r\n                  <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\r\n              </Form.Group>\r\n                <Form.Group controlId=\"email\">\r\n                  <Form.Label>Email</Form.Label>\r\n                  <Form.Control type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n              </Form.Group>\r\n                <Form.Group controlId=\"password\">\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control type=\"text\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n              </Form.Group>\r\n                <LinkInClass value=\"Add\" className=\"green-button\" onClick={this.handleSubmit}/>\r\n                <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n          </Form>\r\n      </div>*/\n\n      /*<form className=\"form-container\" noValidate = {true} id = \"loginOrRegistrationForm\" onSubmit={this.handleSubmit}>\r\n            {this.state.isRegistered ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n            <h2>New User Registration</h2>\r\n            <input\r\n              name = \"name\"\r\n              type = \"text\"\r\n              placeholder = \"Name\"\r\n              autoComplete=\"name\"\r\n              value = {this.state.name}\r\n              onChange = {this.handleChange}\r\n              ref = {(input) => { this.inputToFocus = input }}\r\n          /><br/>\r\n            <input\r\n              name = \"username\"\r\n              type = \"text\"\r\n              placeholder = \"Username\"\r\n              autoComplete=\"username\"\r\n              value = {this.state.username}\r\n              onChange = {this.handleChange}\r\n          /><br/>\r\n            <input\r\n              name = \"password\"\r\n              type = \"password\"\r\n              placeholder = \"Password\"\r\n              autoComplete=\"password\"\r\n              title = \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (£!#€$%^&*)\"\r\n              value = {this.state.password}\r\n              onChange = {this.handleChange}\r\n          /><br/>\r\n            <input\r\n              name = \"confirmPassword\"\r\n              type = \"password\"\r\n              placeholder = \"Confirm password\"\r\n              autoComplete=\"confirmPassword\"\r\n              value = {this.state.confirmPassword}\r\n              onChange = {this.handleChange}\r\n          /><br/><br/>\r\n            <LinkInClass value=\"Register New User\" className=\"green-button\" onClick={this.handleSubmit} />\r\n          <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n      </form>\r\n      */\n      React.createElement(\"form\", {\n        className: \"form-container\",\n        noValidate: true,\n        id: \"loginOrRegistrationForm\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, this.state.isRegistered ? React.createElement(Redirect, {\n        to: \"/DisplayAllCars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }) : null, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, \"New User Registration\"), React.createElement(\"div\", {\n        id: \"nameContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"name\",\n        type: \"text\",\n        placeholder: \"Name\",\n        autoComplete: \"name\",\n        value: this.state.name,\n        onChange: this.handleChange,\n        ref: input => {\n          this.inputToFocus = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: !this.validateName() ? \"\" : \"showCorrectTick\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, checkMark)), nameErrorMessage, React.createElement(\"div\", {\n        id: \"usernameContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"username\",\n        type: \"username\",\n        placeholder: \"Username\",\n        autoComplete: \"username\",\n        value: this.state.username,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"passwordContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        autoComplete: \"password\",\n        title: \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (\\xA3!#\\u20AC$%^&*)\",\n        value: this.state.password,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: !this.validatePassword() ? \"\" : \"showCorrectTick\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, checkMark)), passwordErrorMessage, React.createElement(\"div\", {\n        id: \"passwordContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"confirmPassword\",\n        type: \"password\",\n        placeholder: \"Confirm password\",\n        autoComplete: \"confirmPassword\",\n        value: this.state.confirmPassword,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: !this.validateConfirmPassword() ? \"\" : \"showCorrectTick\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, checkMark)), confirmPasswordErrorMessage, React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Register\",\n        disabled: !inputsAreAllValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"red-button\",\n        to: \"/DisplayAllCars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \"Cancel\"))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:\\nodejs_projects\\cars_client_side_react\\cars_react_app\\client\\src\\components\\Register.js"],"names":["React","Component","Redirect","Link","Form","axios","LinkInClass","SERVER_HOST","Register","constructor","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","userObject","state","username","password","console","log","defaults","withCredentials","post","then","res","data","errorMessage","accessLevel","sessionStorage","isRegistered","confirmPassword","validateName","length","validatePassword","pattern","test","String","validateConfirmPassword","validate","render","checkMark","formInputsState","inputsAreAllValid","Object","keys","every","index","nameErrorMessage","passwordErrorMessage","confirmPasswordErrorMessage","errorMessages","push","match","map","input","inputToFocus"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport {Redirect, Link} from \"react-router-dom\"\r\nimport Form from \"react-bootstrap/Form\"\r\n\r\nimport axios from \"axios\"\r\n\r\nimport LinkInClass from \"../components/LinkInClass\"\r\n\r\nimport {SERVER_HOST} from \"../config/global_constants\"\r\n\r\nexport default class Register extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name:\"\",\r\n            username:\"\",\r\n            password:\"\",\r\n            confirmPassword:\"\",\r\n            isRegistered:false\r\n        }\r\n    }\r\n\r\n\r\n    handleChange = (e) =>\r\n    {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n\r\n    handleSubmit = (e) =>\r\n    {\r\n        e.preventDefault()\r\n\r\n        const userObject = {\r\n            name: this.state.name,\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        }\r\n\r\n        console.log(userObject);\r\n\r\n        axios.defaults.withCredentials = true\r\n        axios.post(`${SERVER_HOST}/user/Register/${this.state.name}/${this.state.username}/${this.state.password}`, userObject)\r\n            .then(res =>\r\n            {\r\n                if(res.data)\r\n                {\r\n\r\n\r\n\r\n                    if (res.data.errorMessage)\r\n                    {\r\n                        console.log(res.data)\r\n                        console.log(res.data.accessLevel)\r\n                        console.log(res.data.errorMessage)\r\n                    }\r\n                    else\r\n                    {\r\n                        console.log(res)\r\n                        console.log(res.data)\r\n                        console.log(res.data.accessLevel)\r\n\r\n                        console.log(\"User Registered and added\")\r\n\r\n                        console.log(res.data.name)\r\n                        console.log(res.data.accessLevel)\r\n\r\n\r\n\r\n                        sessionStorage.name = res.data.name\r\n                        sessionStorage.accessLevel = res.data.accessLevel\r\n\r\n                        this.setState({isRegistered:true})\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    console.log(\"Registration failed\")\r\n                }\r\n            })\r\n    }\r\n\r\n    validateName()\r\n    {\r\n        // valid name pattern\r\n        return (this.state.name.length > 1)\r\n    }\r\n\r\n\r\n   /* validateUsername()\r\n    {\r\n        // valid email pattern\r\n        return (this.state.username)\r\n    }*/\r\n\r\n\r\n    validatePassword()\r\n    {\r\n        const pattern = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[£!#€$%^&*]).{10,}$/   //eslint-disable-line\r\n        return pattern.test(String(this.state.password))\r\n    }\r\n\r\n\r\n    validateConfirmPassword()\r\n    {\r\n        return ((this.state.confirmPassword.length > 0) && (this.state.password === this.state.confirmPassword))\r\n    }\r\n\r\n\r\n    validate()\r\n    {\r\n        return {\r\n            name: this.validateName(),\r\n            /*username: this.validateUsername(),*/\r\n            password: this.validatePassword(),\r\n            confirmPassword: this.validateConfirmPassword()\r\n        }\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n\r\n        const checkMark = \"✔\"\r\n        const formInputsState = this.validate()\r\n        const inputsAreAllValid = Object.keys(formInputsState).every(index => formInputsState[index])\r\n\r\n        let nameErrorMessage = \"\";\r\n        /*let usernameErrorMessage = \"\";*/\r\n        let passwordErrorMessage = \"\";\r\n        let confirmPasswordErrorMessage = \"\";\r\n\r\n        if(!this.validateName())\r\n        {\r\n            nameErrorMessage = <div className=\"error\">Name must be at least two characters long<br/></div>;\r\n        }\r\n\r\n      /*  if(!this.validateUsername())\r\n        {\r\n            usernameErrorMessage = <div className=\"error\">Enter a valid username<br/></div>;\r\n        }*/\r\n\r\n        if(!this.validatePassword())\r\n        {\r\n            let errorMessages = [];\r\n            if(this.state.password.length < 10)\r\n            {\r\n                errorMessages.push(\"Password must be at least ten characters long.\");\r\n            }\r\n            if(!this.state.password.match(/[0-9]/))\r\n            {\r\n                errorMessages.push(\"Password must contain at least one digit (0-9).\");\r\n            }\r\n            if(!this.state.password.match(/[a-z]/))\r\n            {\r\n                errorMessages.push(\"Password must contain at least one lowercase character.\");\r\n            }\r\n            if(!this.state.password.match(/[A-Z]/))\r\n            {\r\n                errorMessages.push(\"Password must contain at least one uppercase character.{'\\n''}\");\r\n            }\r\n            if(!this.state.password.match(/[£!#€$%^&*]/))\r\n            {\r\n                errorMessages.push(\"Password must contain at least one of the characters £!#€$%^&*\");\r\n            }\r\n            passwordErrorMessage = <div className=\"error\"><ul>{errorMessages.map(errorMessage => <li key={errorMessage}> {errorMessage} </li>)}</ul></div>;\r\n        }\r\n\r\n        if(!this.validateConfirmPassword())\r\n        {\r\n            confirmPasswordErrorMessage = <div className=\"error\">Passwords must match<br/></div>;\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            /*<div className=\"form-container\">\r\n                {this.state.redirectToDisplayAllCars ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n\r\n                <Form>\r\n                    <Form.Group controlId=\"name\">\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"text\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n\r\n                    <LinkInClass value=\"Add\" className=\"green-button\" onClick={this.handleSubmit}/>\r\n\r\n                    <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n                </Form>\r\n            </div>*/\r\n\r\n            /*<form className=\"form-container\" noValidate = {true} id = \"loginOrRegistrationForm\" onSubmit={this.handleSubmit}>\r\n\r\n                {this.state.isRegistered ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n\r\n                <h2>New User Registration</h2>\r\n\r\n                <input\r\n                    name = \"name\"\r\n                    type = \"text\"\r\n                    placeholder = \"Name\"\r\n                    autoComplete=\"name\"\r\n                    value = {this.state.name}\r\n                    onChange = {this.handleChange}\r\n                    ref = {(input) => { this.inputToFocus = input }}\r\n                /><br/>\r\n\r\n                <input\r\n                    name = \"username\"\r\n                    type = \"text\"\r\n                    placeholder = \"Username\"\r\n                    autoComplete=\"username\"\r\n                    value = {this.state.username}\r\n                    onChange = {this.handleChange}\r\n                /><br/>\r\n\r\n                <input\r\n                    name = \"password\"\r\n                    type = \"password\"\r\n                    placeholder = \"Password\"\r\n                    autoComplete=\"password\"\r\n                    title = \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (£!#€$%^&*)\"\r\n                    value = {this.state.password}\r\n                    onChange = {this.handleChange}\r\n                /><br/>\r\n\r\n                <input\r\n                    name = \"confirmPassword\"\r\n                    type = \"password\"\r\n                    placeholder = \"Confirm password\"\r\n                    autoComplete=\"confirmPassword\"\r\n                    value = {this.state.confirmPassword}\r\n                    onChange = {this.handleChange}\r\n                /><br/><br/>\r\n\r\n                <LinkInClass value=\"Register New User\" className=\"green-button\" onClick={this.handleSubmit} />\r\n                <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n            </form>\r\n\r\n*/\r\n\r\n\r\n            <form className=\"form-container\" noValidate = {true} id = \"loginOrRegistrationForm\" onSubmit={this.handleSubmit}>\r\n\r\n                {this.state.isRegistered ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n\r\n                <h2>New User Registration</h2>\r\n\r\n                <div id=\"nameContainer\">\r\n                    <input\r\n                        name = \"name\"\r\n                        type = \"text\"\r\n                        placeholder = \"Name\"\r\n                        autoComplete=\"name\"\r\n                        value = {this.state.name}\r\n                        onChange = {this.handleChange}\r\n                        ref = {(input) => { this.inputToFocus = input }}\r\n                    />\r\n                    <span className={!this.validateName() ?\"\" : \"showCorrectTick\"}>{checkMark}</span>\r\n                </div>\r\n                {nameErrorMessage}\r\n\r\n                <div id=\"usernameContainer\">\r\n                    <input\r\n                        name = \"username\"\r\n                        type = \"username\"\r\n                        placeholder = \"Username\"\r\n                        autoComplete=\"username\"\r\n                        value = {this.state.username}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n\r\n                </div>\r\n\r\n\r\n                <div id=\"passwordContainer\">\r\n                    <input\r\n                        name = \"password\"\r\n                        type = \"password\"\r\n                        placeholder = \"Password\"\r\n                        autoComplete=\"password\"\r\n                        title = \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (£!#€$%^&*)\"\r\n                        value = {this.state.password}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                    <span className={!this.validatePassword() ?\"\" : \"showCorrectTick\"}>{checkMark}</span>\r\n                </div>\r\n                {passwordErrorMessage}\r\n\r\n                <div id=\"passwordContainer\">\r\n                    <input\r\n                        name = \"confirmPassword\"\r\n                        type = \"password\"\r\n                        placeholder = \"Confirm password\"\r\n                        autoComplete=\"confirmPassword\"\r\n                        value = {this.state.confirmPassword}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                    <span className={!this.validateConfirmPassword() ?\"\" : \"showCorrectTick\"}>{checkMark}</span>\r\n                </div>\r\n                {confirmPasswordErrorMessage}\r\n\r\n                <input\r\n                    type = \"submit\"\r\n                    value = \"Register\"\r\n                    disabled = {!inputsAreAllValid}\r\n                />\r\n\r\n                <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n            </form>\r\n\r\n\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}