{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodejs_projects\\\\cars_client_side_react\\\\cars_react_app\\\\client\\\\src\\\\components\\\\Register.js\";\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport axios from \"axios\";\nimport LinkInClass from \"../components/LinkInClass\";\nimport { SERVER_HOST } from \"../config/global_constants\";\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleFileChange = e => {\n      this.setState({\n        selectedFile: e.target.files[0]\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let formData = new FormData();\n      formData.append(\"profilePhoto\", this.state.selectedFile);\n      /*const userObject = {\r\n          name: this.state.name,\r\n          username: this.state.username,\r\n          password: this.state.password\r\n      }\r\n        console.log(userObject);*/\n      //axios.defaults.withCredentials = true\n\n      axios.post(\"\".concat(SERVER_HOST, \"/user/Register/\").concat(this.state.name, \"/\").concat(this.state.username, \"/\").concat(this.state.password), formData, {\n        headers: {\n          \"Content-type\": \"multipart/form-data\"\n        }\n      }).then(res => {\n        if (res.data) {\n          if (res.data.errorMessage) {\n            console.log(res.data);\n            console.log(res.data.accessLevel);\n            console.log(res.data.errorMessage);\n          } else {\n            console.log(res);\n            console.log(res.data);\n            console.log(res.data.accessLevel);\n            console.log(\"User Registered and added\");\n            console.log(res.data.name);\n            console.log(res.data.accessLevel); //sessionStorage.name = res.data.name\n            //sessionStorage.accessLevel = res.data.accessLevel\n\n            localStorage.name = res.data.name;\n            localStorage.accessLevel = res.data.accessLevel;\n            localStorage.profilePhoto = res.data.profilePhoto;\n            localStorage.token = res.data.token;\n            this.setState({\n              isRegistered: true\n            });\n          }\n        } else {\n          console.log(\"Registration failed\");\n        }\n      });\n    };\n\n    this.state = {\n      name: \"\",\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      selectedFile: null,\n      isRegistered: false\n    };\n  }\n\n  /* validateName()\r\n   {\r\n       // valid name pattern\r\n       return (this.state.name.length > 1)\r\n   }*/\n\n  /* validateUsername()\r\n   {\r\n       // valid email pattern\r\n       return (this.state.username)\r\n   }*/\n\n  /* validatePassword()\r\n   {\r\n       const pattern = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[£!#€$%^&*]).{10,}$/   //eslint-disable-line\r\n       return pattern.test(String(this.state.password))\r\n   }\r\n  \n   validateConfirmPassword()\r\n   {\r\n       return ((this.state.confirmPassword.length > 0) && (this.state.password === this.state.confirmPassword))\r\n   }\r\n  \n   validate()\r\n   {\r\n       return {\r\n           name: this.validateName(),\r\n        //   username: this.validateUsername(),\r\n           password: this.validatePassword(),\r\n           confirmPassword: this.validateConfirmPassword()\r\n       }\r\n   }*/\n  render() {\n    /*const checkMark = \"✔\"\r\n    const formInputsState = this.validate()\r\n    const inputsAreAllValid = Object.keys(formInputsState).every(index => formInputsState[index])\r\n      let nameErrorMessage = \"\";*/\n\n    /*let usernameErrorMessage = \"\";*/\n\n    /*let passwordErrorMessage = \"\";\r\n    let confirmPasswordErrorMessage = \"\";\r\n      if(!this.validateName())\r\n    {\r\n        nameErrorMessage = <div className=\"error\">Name must be at least two characters long<br/></div>;\r\n    }*/\n\n    /*  if(!this.validateUsername())\r\n      {\r\n          usernameErrorMessage = <div className=\"error\">Enter a valid username<br/></div>;\r\n      }*/\n\n    /*  if(!this.validatePassword())\r\n      {\r\n          let errorMessages = [];\r\n          if(this.state.password.length < 10)\r\n          {\r\n              errorMessages.push(\"Password must be at least ten characters long.\");\r\n          }\r\n          if(!this.state.password.match(/[0-9]/))\r\n          {\r\n              errorMessages.push(\"Password must contain at least one digit (0-9).\");\r\n          }\r\n          if(!this.state.password.match(/[a-z]/))\r\n          {\r\n              errorMessages.push(\"Password must contain at least one lowercase character.\");\r\n          }\r\n          if(!this.state.password.match(/[A-Z]/))\r\n          {\r\n              errorMessages.push(\"Password must contain at least one uppercase character.{'\\n''}\");\r\n          }\r\n          if(!this.state.password.match(/[£!#€$%^&*]/))\r\n          {\r\n              errorMessages.push(\"Password must contain at least one of the characters £!#€$%^&*\");\r\n          }\r\n          passwordErrorMessage = <div className=\"error\"><ul>{errorMessages.map(errorMessage => <li key={errorMessage}> {errorMessage} </li>)}</ul></div>;\r\n      }\r\n        if(!this.validateConfirmPassword())\r\n      {\r\n          confirmPasswordErrorMessage = <div className=\"error\">Passwords must match<br/></div>;\r\n      }*/\n    return (\n      /*<div className=\"form-container\">\r\n          {this.state.redirectToDisplayAllCars ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n            <Form>\r\n              <Form.Group controlId=\"name\">\r\n                  <Form.Label>Name</Form.Label>\r\n                  <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\r\n              </Form.Group>\r\n                <Form.Group controlId=\"email\">\r\n                  <Form.Label>Email</Form.Label>\r\n                  <Form.Control type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n              </Form.Group>\r\n                <Form.Group controlId=\"password\">\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control type=\"text\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n              </Form.Group>\r\n                <LinkInClass value=\"Add\" className=\"green-button\" onClick={this.handleSubmit}/>\r\n                <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n          </Form>\r\n      </div>*/\n\n      /*<form className=\"form-container\" noValidate = {true} id = \"loginOrRegistrationForm\" onSubmit={this.handleSubmit}>\r\n            {this.state.isRegistered ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n            <h2>New User Registration</h2>\r\n            <input\r\n              name = \"name\"\r\n              type = \"text\"\r\n              placeholder = \"Name\"\r\n              autoComplete=\"name\"\r\n              value = {this.state.name}\r\n              onChange = {this.handleChange}\r\n              ref = {(input) => { this.inputToFocus = input }}\r\n          /><br/>\r\n            <input\r\n              name = \"username\"\r\n              type = \"text\"\r\n              placeholder = \"Username\"\r\n              autoComplete=\"username\"\r\n              value = {this.state.username}\r\n              onChange = {this.handleChange}\r\n          /><br/>\r\n            <input\r\n              name = \"password\"\r\n              type = \"password\"\r\n              placeholder = \"Password\"\r\n              autoComplete=\"password\"\r\n              title = \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (£!#€$%^&*)\"\r\n              value = {this.state.password}\r\n              onChange = {this.handleChange}\r\n          /><br/>\r\n            <input\r\n              name = \"confirmPassword\"\r\n              type = \"password\"\r\n              placeholder = \"Confirm password\"\r\n              autoComplete=\"confirmPassword\"\r\n              value = {this.state.confirmPassword}\r\n              onChange = {this.handleChange}\r\n          /><br/><br/>\r\n            <LinkInClass value=\"Register New User\" className=\"green-button\" onClick={this.handleSubmit} />\r\n          <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n      </form>\r\n      */\n      React.createElement(\"form\", {\n        className: \"form-container\",\n        noValidate: true,\n        id: \"loginOrRegistrationForm\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, this.state.isRegistered ? React.createElement(Redirect, {\n        to: \"/DisplayAllCars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }) : null, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \"New User Registration\"), React.createElement(\"div\", {\n        id: \"nameContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"name\",\n        type: \"text\",\n        placeholder: \"Name\",\n        autoComplete: \"name\",\n        value: this.state.name,\n        onChange: this.handleChange,\n        ref: input => {\n          this.inputToFocus = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"usernameContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"username\",\n        type: \"username\",\n        placeholder: \"Username\",\n        autoComplete: \"username\",\n        value: this.state.username,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"passwordContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        autoComplete: \"password\",\n        title: \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (\\xA3!#\\u20AC$%^&*)\",\n        value: this.state.password,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"passwordContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"confirmPassword\",\n        type: \"password\",\n        placeholder: \"Confirm password\",\n        autoComplete: \"confirmPassword\",\n        value: this.state.confirmPassword,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.handleFileChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }), React.createElement(LinkInClass, {\n        value: \"Register New User\",\n        className: \"green-button\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"red-button\",\n        to: \"/DisplayAllCars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, \"Cancel\"))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:\\nodejs_projects\\cars_client_side_react\\cars_react_app\\client\\src\\components\\Register.js"],"names":["React","Component","Redirect","Link","Form","axios","LinkInClass","SERVER_HOST","Register","constructor","props","handleChange","e","setState","target","name","value","handleFileChange","selectedFile","files","handleSubmit","preventDefault","formData","FormData","append","state","post","username","password","headers","then","res","data","errorMessage","console","log","accessLevel","localStorage","profilePhoto","token","isRegistered","confirmPassword","render","input","inputToFocus"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport {Redirect, Link} from \"react-router-dom\"\r\nimport Form from \"react-bootstrap/Form\"\r\n\r\nimport axios from \"axios\"\r\n\r\nimport LinkInClass from \"../components/LinkInClass\"\r\n\r\nimport {SERVER_HOST} from \"../config/global_constants\"\r\n\r\nexport default class Register extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name:\"\",\r\n            username:\"\",\r\n            password:\"\",\r\n            confirmPassword:\"\",\r\n            selectedFile:null,\r\n            isRegistered:false\r\n        }\r\n    }\r\n\r\n\r\n    handleChange = (e) =>\r\n    {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    handleFileChange = (e) =>\r\n    {\r\n        this.setState({selectedFile: e.target.files[0]})\r\n    }\r\n\r\n    handleSubmit = (e) =>\r\n    {\r\n        e.preventDefault()\r\n\r\n        let formData = new FormData()\r\n        formData.append(\"profilePhoto\", this.state.selectedFile)\r\n\r\n        /*const userObject = {\r\n            name: this.state.name,\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        }\r\n\r\n        console.log(userObject);*/\r\n\r\n        //axios.defaults.withCredentials = true\r\n        axios.post(`${SERVER_HOST}/user/Register/${this.state.name}/${this.state.username}/${this.state.password}`, formData, {headers: {\"Content-type\": \"multipart/form-data\"}} )\r\n            .then(res =>\r\n            {\r\n                if(res.data)\r\n                {\r\n                    if (res.data.errorMessage)\r\n                    {\r\n                        console.log(res.data)\r\n                        console.log(res.data.accessLevel)\r\n                        console.log(res.data.errorMessage)\r\n                    }\r\n                    else\r\n                    {\r\n                        console.log(res)\r\n                        console.log(res.data)\r\n                        console.log(res.data.accessLevel)\r\n\r\n                        console.log(\"User Registered and added\")\r\n\r\n                        console.log(res.data.name)\r\n                        console.log(res.data.accessLevel)\r\n\r\n\r\n\r\n                        //sessionStorage.name = res.data.name\r\n                        //sessionStorage.accessLevel = res.data.accessLevel\r\n\r\n                        localStorage.name = res.data.name\r\n                        localStorage.accessLevel = res.data.accessLevel\r\n                        localStorage.profilePhoto = res.data.profilePhoto\r\n                        localStorage.token = res.data.token\r\n\r\n                        this.setState({isRegistered:true})\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    console.log(\"Registration failed\")\r\n                }\r\n            })\r\n    }\r\n\r\n   /* validateName()\r\n    {\r\n        // valid name pattern\r\n        return (this.state.name.length > 1)\r\n    }*/\r\n\r\n\r\n   /* validateUsername()\r\n    {\r\n        // valid email pattern\r\n        return (this.state.username)\r\n    }*/\r\n\r\n\r\n   /* validatePassword()\r\n    {\r\n        const pattern = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[£!#€$%^&*]).{10,}$/   //eslint-disable-line\r\n        return pattern.test(String(this.state.password))\r\n    }\r\n\r\n\r\n    validateConfirmPassword()\r\n    {\r\n        return ((this.state.confirmPassword.length > 0) && (this.state.password === this.state.confirmPassword))\r\n    }\r\n\r\n\r\n    validate()\r\n    {\r\n        return {\r\n            name: this.validateName(),\r\n         //   username: this.validateUsername(),\r\n            password: this.validatePassword(),\r\n            confirmPassword: this.validateConfirmPassword()\r\n        }\r\n    }*/\r\n\r\n\r\n    render()\r\n    {\r\n\r\n        /*const checkMark = \"✔\"\r\n        const formInputsState = this.validate()\r\n        const inputsAreAllValid = Object.keys(formInputsState).every(index => formInputsState[index])\r\n\r\n        let nameErrorMessage = \"\";*/\r\n        /*let usernameErrorMessage = \"\";*/\r\n        /*let passwordErrorMessage = \"\";\r\n        let confirmPasswordErrorMessage = \"\";\r\n\r\n        if(!this.validateName())\r\n        {\r\n            nameErrorMessage = <div className=\"error\">Name must be at least two characters long<br/></div>;\r\n        }*/\r\n\r\n      /*  if(!this.validateUsername())\r\n        {\r\n            usernameErrorMessage = <div className=\"error\">Enter a valid username<br/></div>;\r\n        }*/\r\n\r\n      /*  if(!this.validatePassword())\r\n        {\r\n            let errorMessages = [];\r\n            if(this.state.password.length < 10)\r\n            {\r\n                errorMessages.push(\"Password must be at least ten characters long.\");\r\n            }\r\n            if(!this.state.password.match(/[0-9]/))\r\n            {\r\n                errorMessages.push(\"Password must contain at least one digit (0-9).\");\r\n            }\r\n            if(!this.state.password.match(/[a-z]/))\r\n            {\r\n                errorMessages.push(\"Password must contain at least one lowercase character.\");\r\n            }\r\n            if(!this.state.password.match(/[A-Z]/))\r\n            {\r\n                errorMessages.push(\"Password must contain at least one uppercase character.{'\\n''}\");\r\n            }\r\n            if(!this.state.password.match(/[£!#€$%^&*]/))\r\n            {\r\n                errorMessages.push(\"Password must contain at least one of the characters £!#€$%^&*\");\r\n            }\r\n            passwordErrorMessage = <div className=\"error\"><ul>{errorMessages.map(errorMessage => <li key={errorMessage}> {errorMessage} </li>)}</ul></div>;\r\n        }\r\n\r\n        if(!this.validateConfirmPassword())\r\n        {\r\n            confirmPasswordErrorMessage = <div className=\"error\">Passwords must match<br/></div>;\r\n        }*/\r\n\r\n\r\n\r\n        return (\r\n            /*<div className=\"form-container\">\r\n                {this.state.redirectToDisplayAllCars ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n\r\n                <Form>\r\n                    <Form.Group controlId=\"name\">\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"text\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n\r\n                    <LinkInClass value=\"Add\" className=\"green-button\" onClick={this.handleSubmit}/>\r\n\r\n                    <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n                </Form>\r\n            </div>*/\r\n\r\n            /*<form className=\"form-container\" noValidate = {true} id = \"loginOrRegistrationForm\" onSubmit={this.handleSubmit}>\r\n\r\n                {this.state.isRegistered ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n\r\n                <h2>New User Registration</h2>\r\n\r\n                <input\r\n                    name = \"name\"\r\n                    type = \"text\"\r\n                    placeholder = \"Name\"\r\n                    autoComplete=\"name\"\r\n                    value = {this.state.name}\r\n                    onChange = {this.handleChange}\r\n                    ref = {(input) => { this.inputToFocus = input }}\r\n                /><br/>\r\n\r\n                <input\r\n                    name = \"username\"\r\n                    type = \"text\"\r\n                    placeholder = \"Username\"\r\n                    autoComplete=\"username\"\r\n                    value = {this.state.username}\r\n                    onChange = {this.handleChange}\r\n                /><br/>\r\n\r\n                <input\r\n                    name = \"password\"\r\n                    type = \"password\"\r\n                    placeholder = \"Password\"\r\n                    autoComplete=\"password\"\r\n                    title = \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (£!#€$%^&*)\"\r\n                    value = {this.state.password}\r\n                    onChange = {this.handleChange}\r\n                /><br/>\r\n\r\n                <input\r\n                    name = \"confirmPassword\"\r\n                    type = \"password\"\r\n                    placeholder = \"Confirm password\"\r\n                    autoComplete=\"confirmPassword\"\r\n                    value = {this.state.confirmPassword}\r\n                    onChange = {this.handleChange}\r\n                /><br/><br/>\r\n\r\n                <LinkInClass value=\"Register New User\" className=\"green-button\" onClick={this.handleSubmit} />\r\n                <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n            </form>\r\n\r\n*/\r\n\r\n\r\n            <form className=\"form-container\" noValidate = {true} id = \"loginOrRegistrationForm\" onSubmit={this.handleSubmit}>\r\n\r\n                {this.state.isRegistered ? <Redirect to=\"/DisplayAllCars\"/> : null}\r\n\r\n                <h2>New User Registration</h2>\r\n\r\n                <div id=\"nameContainer\">\r\n                    <input\r\n                        name = \"name\"\r\n                        type = \"text\"\r\n                        placeholder = \"Name\"\r\n                        autoComplete=\"name\"\r\n                        value = {this.state.name}\r\n                        onChange = {this.handleChange}\r\n                        ref = {(input) => { this.inputToFocus = input }}\r\n                    />\r\n\r\n                </div>\r\n\r\n\r\n                <div id=\"usernameContainer\">\r\n                    <input\r\n                        name = \"username\"\r\n                        type = \"username\"\r\n                        placeholder = \"Username\"\r\n                        autoComplete=\"username\"\r\n                        value = {this.state.username}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n\r\n                </div>\r\n\r\n\r\n                <div id=\"passwordContainer\">\r\n                    <input\r\n                        name = \"password\"\r\n                        type = \"password\"\r\n                        placeholder = \"Password\"\r\n                        autoComplete=\"password\"\r\n                        title = \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (£!#€$%^&*)\"\r\n                        value = {this.state.password}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n\r\n                </div>\r\n\r\n\r\n                <div id=\"passwordContainer\">\r\n                    <input\r\n                        name = \"confirmPassword\"\r\n                        type = \"password\"\r\n                        placeholder = \"Confirm password\"\r\n                        autoComplete=\"confirmPassword\"\r\n                        value = {this.state.confirmPassword}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n\r\n                </div>\r\n\r\n                <input\r\n                    type = \"file\"\r\n                    onChange = {this.handleFileChange}\r\n                /><br/><br/>\r\n\r\n\r\n\r\n                <LinkInClass value=\"Register New User\" className=\"green-button\" onClick={this.handleSubmit} />\r\n                <Link className=\"red-button\" to={\"/DisplayAllCars\"}>Cancel</Link>\r\n            </form>\r\n\r\n\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}